package com.demo.serviceimpl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.demo.entity.Student;
import com.demo.exception.StudentNotFoundException;
import com.demo.repository.StudentRepository;
import com.demo.service.StudentService;

// Logic for StudentService CRUD operations
@Service // Marks the class as a service class
public class StudentServiceImpl implements StudentService {

    @Autowired // To enable dependency injection for the repository
    StudentRepository studentRepository; // Provides access to repository methods

    @Override
    public Student registerStudent(Student student) {
        // save() is used for inserting a new record in the table
        return studentRepository.save(student);
    }

    @Override
    public List<Student> getAllStudents() {
        // findAll() fetches all records from the table
        return studentRepository.findAll();
    }

    @Override
    public Student getStudentById(int studentId) throws StudentNotFoundException {
        // findById() fetches details based on the provided ID or throws an exception if not found
        return studentRepository.findById(studentId)
                .orElseThrow(() -> new StudentNotFoundException("Student does not exist with ID: " + studentId));
    }

    @Override
    public Student getByEmail(String email) {
        // Custom method to find a student by email
        return studentRepository.findByStudEmail(email);
    }

    @Override
    public void updateStudent(Student student) {
        // save() is used to update details of an existing record
        if (studentRepository.existsById(student.getStudId())) {
            studentRepository.save(student);
        } else {
            throw new StudentNotFoundException("Cannot update. Student does not exist with ID: " + student.getStudId());
        }
    }

    @Override
    public void deleteStudentById(int studentId) {
        // deleteById() removes a record based on the ID
        if (studentRepository.existsById(studentId)) {
            studentRepository.deleteById(studentId);
        } else {
            throw new StudentNotFoundExeception("Cannot delete. Student does not exist with ID: " + studentId);
        }
    }
}

package com.demo.serviceimpl;

import com.demo.entity.Company;
import com.demo.entity.Student;
import com.demo.exception.CompanyNotFoundException;
import com.demo.exception.StudentNotFoundException;
import com.demo.repository.CompanyRepository;
import com.demo.repository.StudentRepository;
import com.demo.service.CompanyService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class CompanyServiceImpl implements CompanyService {

    @Autowired
    private CompanyRepository companyRepository;

    @Autowired
    private StudentRepository studentRepository;

    @Override
    public Company addCompany(Company company) {
        return companyRepository.save(company);
    }

    @Override
    public Company getCompanyById(Long companyId) {
        return companyRepository.findById(companyId)
                .orElseThrow(() -> new CompanyNotFoundException("Company not found with ID: " + companyId));
    }

    @Override
    public List<Company> getAllCompanies() {
        return companyRepository.findAll();
    }

    @Override
    public Company addApplicantToCompany(Long companyId, Long studentId) {
        // Retrieve the company and student
        Company company = companyRepository.findById(companyId)
                .orElseThrow(() -> new CompanyNotFoundException("Company not found with ID: " + companyId));
        // Use .orElseThrow() to retrieve the Student or throw an exception if not found
        Student student = studentRepository.findAllById(studentId)
                .orElseThrow(() -> new StudentNotFoundException("Student not found with ID: " + studentId));
        // Add the student to the company's applicant list
        company.getApplicants().add(student);

        // Save and return the updated company
        return companyRepository.save(company);
    }

    @Override
    public List<Student> getApplicantsForCompany(Long companyId) {
        Company company = companyRepository.findById(companyId)
                .orElseThrow(() -> new CompanyNotFoundException("Company not found with ID: " + companyId));
        return company.getApplicants();
    }
}
